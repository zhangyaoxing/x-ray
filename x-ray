#!/usr/bin/env python3
import argparse
import logging
from libs.utils import *
from libs.framework import Framework
from pymongo import MongoClient
from pymongo.uri_parser import parse_uri

parser = argparse.ArgumentParser(description="X-Ray project. Run health checks against MongoDB clusters.")
parser.add_argument("-q", "--quiet", help="Quiet mode. Defaults to \"false\".", action="store_true", default=False)
parser.add_argument("-s", "--checkset", help="Checkset to run. Defaults to \"default\".", type=str, default="default")
parser.add_argument("-o", "--output", help="Output folder path. Defaults to \"output/\".", type=str, default="output/")
parser.add_argument("-f", "--format", help="Output format (markdown/html). Defaults to \"markdown\".", type=str, default="markdown", choices=["markdown", "html"])
parser.add_argument("--uri", help="MongoDB database URI. Defaults to \"mongodb://localhost:27017/\".", type=str, default="mongodb://localhost:27017/")
parser.add_argument("-c", "--config", help="Path to configuration file. Defaults to \"config.json\".", type=str, default="config.json")
args = parser.parse_args()

logger = logging.getLogger(__name__)
if args.quiet:
    logger.setLevel(logging.FATAL)

def main():
    parsed_uri = parse_uri(args.uri)
    client = MongoClient(args.uri)  # Initialize MongoDB client
    
    # Load configuration from file
    try:
        config = load_config(args.config)
    except FileNotFoundError:
        logger.error(f"Config file not found: {args.config}")
        logger.info("Please provide a valid path to config.json using the -c/--config argument")
        return 1
        
    checkset = args.checkset
    output_folder = args.output if args.output.endswith("/") else f"{args.output}/"
    framework = Framework(config)
    framework.run_checks(checkset, client=client, output_folder=output_folder, parsed_uri=parsed_uri)
    framework.output_results(output_folder=output_folder, format=args.format)
    return 0

if __name__ == "__main__":
    exit_code = main()
    import sys
    sys.exit(exit_code)